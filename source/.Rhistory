print(paste("xelse",as.character(x)))
initialframe = cbind(initialframe,tempdata,matrix('',nrow= rowsize+1,ncol=1))
}
lastrow <<- initialframe
cols <<- cols
return(cols)
}
cols=c()
for(i in 1:length(ID_u)){
cols = makebigframe(i,x,y,cols,data)
}
knitr::opts_chunk$set(echo = TRUE)
data = read.csv("/Users/hiro.t/Downloads/dodacampus.csv")
library(dplyr)
library(stringr)
library(ggplot2)
library(ggbeeswarm)
library(lemon)
head(data)
rownames(data)
colnames(data)
pl20 = ggplot(data=data,aes(x="現在の大学生活にどれくらい満足していますか..100点満点."))+
geom_bar()+
theme_classic()
print(pl20)
pl20 = ggplot(data=data,aes(x=as.numeric("現在の大学生活にどれくらい満足していますか..100点満点.")))+
geom_bar()+
theme_classic()
print(pl20)
data$現在の大学生活にどれくらい満足していますか..100点満点.
pl20 = ggplot(data=data,aes(x=!is.na(as.numeric("現在の大学生活にどれくらい満足していますか..100点満点."))))+
geom_bar()+
theme_classic()
print(pl20)
score = as.numeric("現在の大学生活にどれくらい満足していますか..100点満点.")
score = as.numeric(data$現在の大学生活にどれくらい満足していますか..100点満点.)
pl20 = ggplot(data=data,aes(x=!is.na(as.numeric(現在の大学生活にどれくらい満足していますか..100点満点.))))+
geom_bar()+
theme_classic()
print(pl20)
pl20 = ggplot(data=data,aes(x=as.numeric(現在の大学生活にどれくらい満足していますか..100点満点.)))+
geom_bar()+
theme_classic()
print(pl20)
pl20 = ggplot(data=data,aes(x=as.numeric(現在の大学生活にどれくらい満足していますか..100点満点.),fill = この中に使ってみたいと思ったものはありましたか..複数可..1))+
geom_bar()+
theme_classic()
print(pl20)
pl20 = ggplot(data=data,aes(x=as.numeric(現在の大学生活にどれくらい満足していますか..100点満点.)))+
geom_bar()+
theme_classic()
print(pl20)
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
```{r}
data = read.csv("/Users/hiro.t/Documents/BiC/ank_res.csv")
```
data = read.csv("/Users/hiro.t/Documents/BiC/ank_res.csv")
data = read.csv("/Users/hiro.t/Documents/BiC/ank_res.csv",stringsAsFactors = F)
data$count = as.numeric(data$count)
data$score = as.numeric(data$score)
library(dplyr)
library(stringr)
library(ggplot2)
library(ggbeeswarm)
library(lemon)
paste(data$c1,data$c2,data$c3,data$c4,sep = '_')
rbind(data,as.data.frame(paste(data$c1,data$c2,data$c3,data$c4,sep = '_')))
rbind(data,as.data.frame(coo = paste(data$c1,data$c2,data$c3,data$c4,sep = '_')))
d2 = group_by(data,school_rank)
summarise(d2,n=n(),score_mean=mean(score),count_mean=mean(count))
summarise(d2,n=n(),score_mean=mean(score),score_sd = sd(score),count_mean=mean(count),count_sd=sd(count))
hist(data$score~data$count)
data$score
data$count
mode(data$score)
p = ggplot(data,aes(as.factor(score),as.factor(count)))+geom_tile(aes(fill=value))+scale_fill_gradient(low="white",high="red")
print(p)
table1 = xtabs(~as.factor(score) + as.factor(count), data = data)
table1
d2=melt(table1)
library(reshape2)
library(ggthemes)
install.packages("ggthemes")
d2=melt(table1)
d2
rownames(d2) = c('score','count','value')
rowname(d2) = c('score','count','value')
rnames(d2) = c('score','count','value')
names(d2) = c('score','count','value')
p = ggplot(data,aes(as.factor(score),as.factor(count)))+
geom_tile(aes(fill=value))+
scale_fill_gradient(low="white",high="red")
print(p)
p = ggplot(d2,aes(as.factor(score),as.factor(count)))+
geom_tile(aes(fill=value))+
scale_fill_gradient(low="white",high="red")
print(p)
dev.new()
p
View(table1)
d3 = group_by(data,as.factor(score))
summarise(d3,n=n(),count_mean=mean(cont))
summarise(d3,n=n(),count_mean=mean(count))
data = transform(data,cat=paste(data$c1,data$c2,data$c3))
data = transform(data,cat=paste(data$c1,data$c2,data$c3))
data
A = data[]
A = data[]
library(stringr)
A = data　%>%
filter(str_detect(cat,"A"))
A
B = data　%>%
filter(str_detect(cat,"B"))
D = data　%>%
filter(str_detect(cat,"D"))
C = data　%>%
filter(str_detect(cat,"C"))
par(mfrow=c(2,2))
hist(A$score,main = 'A')
hist(B$score,main = 'B')
hist(C$score,main = 'C')
hist(D$score,main = 'D')
dev.new()
par(mfrow=c(2,2))
hist(A$score,main = 'A')
hist(B$score,main = 'B')
hist(C$score,main = 'C')
hist(D$score,main = 'D')
dev.new()
par(mfrow=c(2,2))
hist(A$score,main = 'A')
hist(B$score,main = 'B')
hist(C$score,main = 'C')
hist(D$score,main = 'D')
knitr::opts_chunk$set(echo = TRUE)
load("/Users/hiro.t/OneDrive/Documents/Univ/M1/locationwalker/finalset/PC1to3/rdata/a_bra.rda")
bra.pca=templ.pca
load("/Users/hiro.t/OneDrive/Documents/Univ/M1/locationwalker/finalset/PC1to3/rdata/a_com.rda")
com.pca=templ.pca
bra.pca
com.pca
load("/Users/hiro.t/OneDrive/Documents/Univ/M1/locationwalker/finalset/Sol_newG/rdata/a_sol.rda")
sol.pca=templ.pca
sol.pca
biplot(bra.pca)
com.pca
biplot(com.pca)
bra.pca
biplot(bra.pca)
dev.new()
biplot(bra.pca,main="Bra_all")
sol.pca
biplot(sol.pca,main="Sol_all")
biplot(sol.pca,main="Sol_all")
biplot(com.pca,main="Com_all")
biplot(sol.pca,main="Sol_all")
biplot(com.pca,main="Com_all")
load('/Users/hiro.t/OneDrive/Documents/Univ/M1/locationwalker/finalset/Sol_newG/rdata/h_sol.rda')
solh.pca=templ.pca
solh.pca
biplot(solh.pca,main="sol_h")
biplot(solh.pca,main="sol_h")
library(rmarkdown)
pandoc_available()
require(rmarkdown)
render("test.Rmd", output_format = "pdf_document")
tinytex::tlmgr_install("ipaex")
install.packages("tinytex")
install.packages("tinytex")
install.packages("tinytex")
install.packages("tinytex")
tinytex::install_tinytex()
install.packages("tinytex")
tinytex::tlmgr_install("ipaex")
com.pca
biplot(sol.pca,main="Sol_all")
load('/Users/hiro.t/OneDrive/Documents/Univ/M1/locationwalker/finalset/Sol_newG/rdata/h_sol.rda')
solh.pca=templ.pca
solh.pca
knitr::opts_chunk$set(echo = TRUE)
sol_d4 = read.csv("/Users/hiro.t/OneDrive/Documents/Univ/M1/locationwalker/finalset/Sol_newG/a_sol_data_4.csv",stringsAsFactors = F)
head(sol_d4)
library(dplyr)
library(stringr)
library(ggplot2)
library(ggbeeswarm)
library(lemon)
sol_d4 %>% group_by(Genus,SCSI,growth)
sol_d4["SCSI"]
sol_d4[,c("Genus","SCSI")]
sol_d4[,c("fixGenus","SCSI","Weight_list","Growth")]
sol_d4[c("fixGenus","SCSI","Weight_list","Growth")]
sol_d4["fixGenus","SCSI","Weight_list","Growth"]
sol_d4["fixGenus","SCSI","Weight_list"]
sol_d4[c("fixGenus","SCSI")]
sol_d4[c("fixGenus","SCSI","Weight_list")]
sol_d4[c("fixGenus","SCSI","Weight_list","growth")]
sol2 = sol_d4 %>% sol_d4[c("fixGenus","SCSI","Weight_list","growth")] %>% group_by(fixGenus,SCSI,growth)
sol2 = %>% sol_d4[c("fixGenus","SCSI","Weight_list","growth")] %>% group_by(fixGenus,SCSI,growth)
sol2 = sol_d4[c("fixGenus","SCSI","Weight_list","growth")] %>% group_by(fixGenus,SCSI,growth)
sol2
sol2$Weight_list = as.numeric(sol2$Weight_list)
sol2 = sol2 %>% group_by(fixGenus,SCSI,growth)
sol2
sol2 %>% summarise(mean=mean(Weight_list),sd=sd(Weight_list))
sol_d4[sol_d4$fixGenus == "Cestrum",]
pl1= ggplot(data = sol2, aes(x = fixGenus, y = Weight_list,color = school_rank))+
geom_boxplot()+
theme_classic()
print(pl1)
pl1= ggplot(data = sol2, aes(x = fixGenus, y = Weight_list,color = growth))+
geom_boxplot()+
theme_classic()
print(pl1)
dev.new()
print(pl1)
pl2 = pl1+
facet_rep_grid(.~ SCSI, scales="free_y")
print(pl2)
pl1= ggplot(data = sol2, aes(x = fixGenus, y = 10^Weight_list,color = growth))+
geom_boxplot()+
theme_classic()
print(pl1)
pl1
res1= aov(Weight_list ~ SCSI + Genus + SCSI + growth,data=sol2)
res1= aov(Weight_list ~ SCSI + fixGenus + SCSI + growth,data=sol2)
summary(res1)
TukeyHSD(res1)
res1= aov(Weight_list ~ SCSI + fixGenus  + growth,data=sol2)
res1
summary(res1)
res2=aov(Weight_list ~ + growth,data=sol2)
summary(res2)
pl3=ggplot(data = sol2, aes(x = growth, y = Weight_list))+
geom_boxplot()+
theme_classic()
pl3
pl3=ggplot(data = sol2, aes(x = growth, y = Weight_list,color = fixGenus))+
geom_quasirandom()+
theme_classic()
pl
pl3
pl3=ggplot(data = sol2, aes(x = growth, y = Weight_list,color = fixGenus))+
geom_quasirandom()+
facet_rep_grid(.~ SCSI, scales="free_y")+
theme_classic()
pl3
pl3=ggplot(data = sol2, aes(x = growth, y = Weight_list,color = fixGenus))+
geom_quasirandom()+
facet_rep_grid(.~ SCSI, scales="free_y")+
geom_boxplot(color=growth)
pl3=ggplot(data = sol2, aes(x = growth, y = Weight_list,color = fixGenus))+
geom_quasirandom()+
facet_rep_grid(.~ SCSI, scales="free_y")+
geom_boxplot(color=growth)+
theme_classic()
pl3=ggplot(data = sol2, aes(x = growth, y = Weight_list,color = fixGenus))+
geom_quasirandom()+
facet_rep_grid(.~ SCSI, scales="free_y")+
geom_boxplot()+
theme_classic()
pl3
pl3=ggplot(data = sol2, aes(x = growth, y = Weight_list,color = fixGenus))+
geom_quasirandom()+
facet_rep_grid(.~ SCSI, scales="free_y")+
theme_classic()
pl3
pl3=ggplot(data = sol2, aes(x = growth, y = Weight_list,color = fixGenus))+
geom_quasirandom()+
facet_rep_grid(.~ SCSI, scales="free_y")+
stat_summary(fun.y = "mean", fun.ymin = function(x)mean(x), fun.ymax = function(x)mean(x), geom = "crossbar", colour = "black", width = 0.2)+
theme_classic()
pl3
res1= aov(Weight_list ~ SCSI + fixGenus  + growth,data=sol2)
summary(res1)
load("/Users/hiro.t/OneDrive/Documents/Univ/M1/locationwalker/finalset/PC1to3/rdata/a_bra.rda")
bra.pca=templ.pca
load("/Users/hiro.t/OneDrive/Documents/Univ/M1/locationwalker/finalset/PC1to3/rdata/a_com.rda")
com.pca=templ.pca
load("/Users/hiro.t/OneDrive/Documents/Univ/M1/locationwalker/finalset/Sol_newG/rdata/a_sol.rda")
sola.pca=templ.pca
load("/Users/hiro.t/OneDrive/Documents/Univ/M1/locationwalker/finalset/Sol_newG/rdata/h_sol.rda")
solh.pca=templ.pca
dev.new()
par(mfrow=c(2,2))
biplot(bra.pca,main="Bra_all")
biplot(com.pca,main="Ast_all")
biplot(sola.pca,main="Sol_all")
biplot(solah.pca,main="Sol_herb")
biplot(solh.pca,main="Sol_herb")
library(lemon)
load("/Users/hiro.t/OneDrive/Documents/Univ/M1/locationwalker/finalset/PC1to3/rdata/a_bra.rda")
templ.pca
autoplot(pca_res, data = iris, colour = 'Species', loadings = TRUE)
library(ggfortify)
install.packages("ggfortify")
library(ggfortify)
library(dplyr)
library(stringr)
library(ggplot2)
library(ggbeeswarm)
library(lemon)
load("/Users/hiro.t/OneDrive/Documents/Univ/M1/locationwalker/finalset/PC1to3/rdata/a_bra.rda")
autoplot(pca_res, data = iris, colour = 'Species', loadings = TRUE)
load("/Users/hiro.t/OneDrive/Documents/Univ/M1/locationwalker/finalset/PC1to3/rdata/a_bra.rda")
autoplot(templ.pca, data = iris, colour = 'Species', loadings = TRUE)
load("/Users/hiro.t/OneDrive/Documents/Univ/M1/locationwalker/finalset/PC1to3/rdata/a_bra.rda")
autoplot(pca_res,  colour = 'Species', loadings = TRUE)
load("/Users/hiro.t/OneDrive/Documents/Univ/M1/locationwalker/finalset/PC1to3/rdata/a_bra.rda")
autoplot(templ.pca,  colour = 'Species', loadings = TRUE)
load("/Users/hiro.t/OneDrive/Documents/Univ/M1/locationwalker/finalset/PC1to3/rdata/a_bra.rda")
autoplot(templ.pca,  loadings = TRUE)
load("/Users/hiro.t/OneDrive/Documents/Univ/M1/locationwalker/finalset/PC1to3/rdata/a_bra.rda")
autoplot(templ.pca,  loadings = TRUE,loadings.label = TRUE, loadings.label.size = 3)
load("/Users/hiro.t/OneDrive/Documents/Univ/M1/locationwalker/finalset/PC1to3/rdata/a_bra.rda")
autoplot(templ.pca,  loadings = TRUE,loadings.label = TRUE, loadings.label.size = 5)
load("/Users/hiro.t/OneDrive/Documents/Univ/M1/locationwalker/finalset/PC1to3/rdata/a_bra.rda")
autoplot(templ.pca,  loadings = TRUE,loadings.colour = 'blue',loadings.label = TRUE, loadings.label.size = 5)
load("/Users/hiro.t/OneDrive/Documents/Univ/M1/locationwalker/finalset/PC1to3/rdata/a_bra.rda")
pl1 = autoplot(templ.pca,  loadings = TRUE,loadings.colour = 'blue',loadings.label = TRUE, loadings.label.size = 5)+
theme_classic()
dev.new()
pl1
load("/Users/hiro.t/OneDrive/Documents/Univ/M1/locationwalker/finalset/PC1to3/rdata/a_bra.rda")
pl1 = autoplot(templ.pca,  color = "3a86ff",loadings = TRUE,loadings.colour = 'blue',loadings.label = TRUE, loadings.label.size = 5)+
theme_classic()
pl1
load("/Users/hiro.t/OneDrive/Documents/Univ/M1/locationwalker/finalset/PC1to3/rdata/a_bra.rda")
pl1 = autoplot(templ.pca,  color = "3A86FF",loadings = TRUE,loadings.colour = 'blue',loadings.label = TRUE, loadings.label.size = 5)+
theme_classic()
pl1
load("/Users/hiro.t/OneDrive/Documents/Univ/M1/locationwalker/finalset/PC1to3/rdata/a_bra.rda")
pl1 = autoplot(templ.pca,  color = "blue",loadings = TRUE,loadings.colour = 'red',loadings.label = TRUE, loadings.label.size = 5)+
theme_classic()
pl1
load("/Users/hiro.t/OneDrive/Documents/Univ/M1/locationwalker/finalset/PC1to3/rdata/a_bra.rda")
pl1 = autoplot(templ.pca,  colour = "3A86FF",loadings = TRUE,loadings.colour = 'blue',loadings.label = TRUE, loadings.label.size = 5)+
theme_classic()
p1
pl1
load("/Users/hiro.t/OneDrive/Documents/Univ/M1/locationwalker/finalset/PC1to3/rdata/a_bra.rda")
pl1 = autoplot(templ.pca,  colour = 3A86FF,loadings = TRUE,loadings.colour = 'blue',loadings.label = TRUE, loadings.label.size = 5)+
load("/Users/hiro.t/OneDrive/Documents/Univ/M1/locationwalker/finalset/PC1to3/rdata/a_bra.rda")
pl1 = autoplot(templ.pca,  colour = "3a86ff",loadings = TRUE,loadings.colour = 'blue',loadings.label = TRUE, loadings.label.size = 5)+
theme_classic()
pl1
load("/Users/hiro.t/OneDrive/Documents/Univ/M1/locationwalker/finalset/PC1to3/rdata/a_bra.rda")
pl1 = autoplot(templ.pca,  colour = "#3a86ff",loadings = TRUE,loadings.colour = 'blue',loadings.label = TRUE, loadings.label.size = 5)+
theme_classic()
pl1
load("/Users/hiro.t/OneDrive/Documents/Univ/M1/locationwalker/finalset/PC1to3/rdata/a_bra.rda")
pl1 = autoplot(templ.pca,  colour = "#3a86ff",loadings = TRUE,loadings.colour = 'red',loadings.label = TRUE, loadings.label.size = 5)+
theme_classic()
pl1
load("/Users/hiro.t/OneDrive/Documents/Univ/M1/locationwalker/finalset/PC1to3/rdata/a_bra.rda")
pl1 = autoplot(templ.pca,  colour = "#3a86ff",loadings = TRUE,loadings.colour = 'red',loadings.label = TRUE, loadings.label.size = 5,main="Brassicaceae_all")+
theme_classic()
pl1
par(mrow(2,2))
par(mfrow=c(2,2))
pl1
par(mfrow=c(2,2))
plot(pl1)
pl1 = autoplot(templ.pca,  colour = "#3a86ff",loadings = TRUE,loadings.colour = 'red',loadings.label = TRUE, loadings.label.size = 5,main="Asteraceae_all")+
theme_classic()
plot(pl1)
load("/Users/hiro.t/OneDrive/Documents/Univ/M1/locationwalker/finalset/PC1to3/rdata/a_com.rda")
pl2 = autoplot(templ.pca,  colour = "#3a86ff",loadings = TRUE,loadings.colour = 'red',loadings.label = TRUE, loadings.label.size = 5,main="Asteraceae_all")+
theme_classic()
load("/Users/hiro.t/OneDrive/Documents/Univ/M1/locationwalker/finalset/PC1to3/rdata/a_bra.rda")
pl1 = autoplot(templ.pca,  colour = "#3a86ff",loadings = TRUE,loadings.colour = 'red',loadings.label = TRUE, loadings.label.size = 5,main="Asteraceae_all")+
theme_classic()
load("/Users/hiro.t/OneDrive/Documents/Univ/M1/locationwalker/finalset/Sol_newG/rdata/a_sol.rda")
pl3 = autoplot(templ.pca,  colour = "#3a86ff",loadings = TRUE,loadings.colour = 'red',loadings.label = TRUE, loadings.label.size = 5,main="Asteraceae_all")+
theme_classic()
load("/Users/hiro.t/OneDrive/Documents/Univ/M1/locationwalker/finalset/Sol_newG/rdata/h_sol.rda")
pl4 = autoplot(templ.pca,  colour = "#3a86ff",loadings = TRUE,loadings.colour = 'red',loadings.label = TRUE, loadings.label.size = 5,main="Asteraceae_all")+
theme_classic()
par(mfrow=c(2,2))
plot(pl1)
plot(pl2)
plot(pl3)
plot(pl4)
install.packages("ggpubr")
library(ggpubr)
dev.new()
ggpubr::ggarrange(pl1, pl2, pl3, pl4, labels = LETTERS)
print(animats)
source( "analyzefunctions.R" )
setwd('YOUR_FILE_ADDRESS/Seedsize_associated_matingsystem')
setwd("/Users/hiro.t/Documents/GitHub/Seedsize_associated_matingsystem/analyzefunctions.R")
setwd("/Users/hiro.t/Documents/GitHub/Seedsize_associated_matingsystem")
source( "analyzefunctions.R" )
datanames = c('sol','bra','com')
initializing()
setwd('YOUR_FILE_ADDRESS/Seedsize_associated_matingsystem/source/Asteraceae.csv')
setwd('Ysource')
setwd('source')
setwd('source/')
setwd('/source')
setwd('YOUR_FILE_ADDRESS/Seedsize_associated_matingsystem/source')
setwd('/Users/hiro.t/Documents/GitHub/Seedsize_associated_matingsystem/source')
source( "analyzefunctions.R" )
setwd("/Users/hiro.t/Documents/GitHub/Seedsize_associated_matingsystem")
source( "analyzefunctions.R" )
datanames = c('sol','bra','com')
initializing()
setwd('/Users/hiro.t/Documents/GitHub/Seedsize_associated_matingsystem/source')
##DoMainGLMMAnalyzing_withAICmodel##
for (type in c('a','h')){
for (fam in datanames){
famname = paste(type,fam,sep = '_')
dataset = get(paste(famname,'tmp',sep = '_'))
#forml = get(paste(famname,'foml',sep = '_'))
name_analyfile = paste(famname,'analy',sep = '_')
name_analyfilepca = paste('pca',famname,'tmp',sep = '_')
print(famname)
#analy_AICmodel = doandsaveglmm(dataset,forml,paste(famname,'pc1to3_AICmodel',sep = ''))
#a_AIC.coef = as.data.frame(summary(analy_AICmodel)[["coefficients"]])
#condition = rownames(a_AIC.coef) == 'XS'
#score = data.frame(array(c(paste(famname,'pc1to3_AICmodel',sep=''),a_AIC.coef$Estimate[condition],a_AIC.coef$`Std. Error`[condition],a_AIC.coef$df[condition],a_AIC.coef$`t value`[condition],a_AIC.coef$`Pr(>|t|)`[condition],as.character(forml[3])),dim = c(1,7)))
#glmm_chart =　rbind(glmm_chart,score)
pcadataset = fPCA(dataset,famname)
write.csv(pcadataset,file = paste(name_analyfilepca,'.csv',sep = ""),row.names = F)
pcaanaly = lmerTest::lmer(Y ~ XS + PC1 + PC2 + PC3  + (1|Z),data=pcadataset ,REML = FALSE)
save(pcaanaly, file = sprintf('rdata/glmm_pc1to3_%s.rda',famname))
aic = doAIC(pcaanaly,famname)
write.csv(aic,file=sprintf('output/AIC_pc1to3_%s.csv',famname))
aicbest = pcaAICchart(aic)
print(paste(aicbest,famname))
aicscore = data.frame(array(c(famname,aicbest,aic$AIC[1]),dim = c(1,3)))
aicscore_chart = rbind(aicscore_chart,aicscore)
aicedpca_analy = doandsaveglmm(pcadataset,aicbest,paste(famname,'_PCnAICmodel',sep = ''))
pcnaic.coef = as.data.frame(summary(aicedpca_analy)[["coefficients"]])
condition = rownames(pcnaic.coef) == 'XS'
pcnscore = data.frame(array(c(paste(famname,'_PCnAICmodel',sep=''),pcnaic.coef$Estimate[condition],pcnaic.coef$`Std. Error`[condition],pcnaic.coef$df[condition],pcnaic.coef$`t value`[condition],pcnaic.coef$`Pr(>|t|)`[condition],as.character(aicbest)),dim = c(1,7)))
glmm.pcn_chart =　rbind(glmm.pcn_chart,pcnscore)
#rm(famname,dataset,forml,pcadataset,aic)
}
}
savesummarys()
##codes for Y~XS
for (type in c('a')){
for (fam in datanames){
param = 'XS'
famname = paste(type,fam,sep = '_')
dataset = get(paste(famname,'tmp',sep = '_'))
forml = sprintf('Y ~ %s  + (1|Z)','XS')
name_analyfile = paste(famname,param,'analy',sep = '_')
print(famname)
analy_AICmodel = doandsaveglmm(dataset,forml,paste(famname,param,'_param',sep = ''))
a_AIC.coef = as.data.frame(summary(analy_AICmodel)[["coefficients"]])
condition = rownames(a_AIC.coef) == param
score = data.frame(array(c(paste(famname,'_',param,sep=''),a_AIC.coef$Estimate[condition],a_AIC.coef$`Std. Error`[condition],a_AIC.coef$df[condition],a_AIC.coef$`t value`[condition],a_AIC.coef$`Pr(>|t|)`[condition],as.character(forml)),dim = c(1,4)))
#glmm_paramchart =　rbind(glmm_paramchart,score)
}
}
scscore
score
##codes for Y~XS
for (type in c('a')){
for (fam in datanames){
param = 'XS'
famname = paste(type,fam,sep = '_')
dataset = get(paste(famname,'tmp',sep = '_'))
forml = sprintf('Y ~ %s  + (1|Z)','XS')
name_analyfile = paste(famname,param,'analy',sep = '_')
print(famname)
analy_AICmodel = doandsaveglmm(dataset,forml,paste(famname,param,'_param',sep = ''))
a_AIC.coef = as.data.frame(summary(analy_AICmodel)[["coefficients"]])
condition = rownames(a_AIC.coef) == param
score = data.frame(array(c(paste(famname,'_',param,sep=''),a_AIC.coef$Estimate[condition],a_AIC.coef$`Std. Error`[condition],a_AIC.coef$df[condition],a_AIC.coef$`t value`[condition],a_AIC.coef$`Pr(>|t|)`[condition],as.character(forml)),dim = c(1,4)))
glmm_paramchart =　rbind(glmm_paramchart,score)
}
}
setwd("/Users/hiro.t/Documents/GitHub/Seedsize_associated_matingsystem")
/Users/hiro.t/Documents/GitHub/Seedsize_associated_matingsystem/analyzefunctions.R
source("/Users/hiro.t/Documents/GitHub/Seedsize_associated_matingsystem/analyzefunctions.R")
initializing()
for (type in c('a','h')){
for (fam in datanames){
famname = paste(type,fam,sep = '_')
dataset = get(paste(famname,'tmp',sep = '_'))
#forml = get(paste(famname,'foml',sep = '_'))
name_analyfile = paste(famname,'analy',sep = '_')
name_analyfilepca = paste('pca',famname,'tmp',sep = '_')
print(famname)
#analy_AICmodel = doandsaveglmm(dataset,forml,paste(famname,'pc1to3_AICmodel',sep = ''))
#a_AIC.coef = as.data.frame(summary(analy_AICmodel)[["coefficients"]])
#condition = rownames(a_AIC.coef) == 'XS'
#score = data.frame(array(c(paste(famname,'pc1to3_AICmodel',sep=''),a_AIC.coef$Estimate[condition],a_AIC.coef$`Std. Error`[condition],a_AIC.coef$df[condition],a_AIC.coef$`t value`[condition],a_AIC.coef$`Pr(>|t|)`[condition],as.character(forml[3])),dim = c(1,7)))
#glmm_chart =　rbind(glmm_chart,score)
pcadataset = fPCA(dataset,famname)
write.csv(pcadataset,file = paste(name_analyfilepca,'.csv',sep = ""),row.names = F)
pcaanaly = lmerTest::lmer(Y ~ XS + PC1 + PC2 + PC3  + (1|Z),data=pcadataset ,REML = FALSE)
save(pcaanaly, file = sprintf('analyzesummary/rdata/glmm_pc1to3_%s.rda',famname))
aic = doAIC(pcaanaly,famname)
write.csv(aic,file=sprintf('analyzesummary/output/AIC_pc1to3_%s.csv',famname))
aicbest = pcaAICchart(aic)
print(paste(aicbest,famname))
aicscore = data.frame(array(c(famname,aicbest,aic$AIC[1]),dim = c(1,3)))
aicscore_chart = rbind(aicscore_chart,aicscore)
aicedpca_analy = doandsaveglmm(pcadataset,aicbest,paste(famname,'_PCnAICmodel',sep = ''))
pcnaic.coef = as.data.frame(summary(aicedpca_analy)[["coefficients"]])
condition = rownames(pcnaic.coef) == 'XS'
pcnscore = data.frame(array(c(paste(famname,'_PCnAICmodel',sep=''),pcnaic.coef$Estimate[condition],pcnaic.coef$`Std. Error`[condition],pcnaic.coef$df[condition],pcnaic.coef$`t value`[condition],pcnaic.coef$`Pr(>|t|)`[condition],as.character(aicbest)),dim = c(1,7)))
glmm.pcn_chart =　rbind(glmm.pcn_chart,pcnscore)
#rm(famname,dataset,forml,pcadataset,aic)
}
}
savesummarys()
